#!/usr/bin/env python
PACKAGE = "potentialfield_local_planner"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("map_frame", str_t, 0, "Map frame of the robot.", "map")

gen.add("max_linear_vel", double_t, 0, "Maximum linear velocity of the robot in meters/sec", 0.5, 0, 5)
gen.add("min_linear_vel", double_t, 0, "Minimum linear velocity of the robot in meters/sec", -0.5, -5, 0)
gen.add("acc_linear_vel", double_t, 0, "Limit linear acceleration velocity of the robot in meters/sec^2", 0.2, 0, 5)

gen.add("max_vel_theta", double_t, 0, "Maximum angular velocity of the robot for in-place rotation in radians/sec",  0.5, 0, 5)
gen.add("min_vel_theta", double_t, 0, "Minimum angular velocity of the robot for in-place rotation in radians/sec", -0.5, -5, 0)
gen.add("acc_vel_theta", double_t, 0, "Limit theta acceleration velocity of the robot in meters/sec^2", 0.2, 0, 5)

gen.add("xy_goal_tolerance", double_t, 0, "Allowed Euclidean distance of the robot to goal in meters", 0.1, 0, 1)
gen.add("yaw_goal_tolerance", double_t, 0, "Allowed orientation error of the robot for in-place rotation in radians", 0.1, 0, 1)
gen.add("yaw_moving_tolerance", double_t, 0, "Allowed orientation error of the robot for in-place rotation when moving in radians", 0.5, 0, 1)

gen.add("timeout", double_t, 0, "TF transform timeout.", 0.5, 0, 5)

gen.add("alpha", double_t, 0, "Constant for attract force.", 1, 0, 1)
gen.add("beta", double_t, 0, "Constant for repulsive force force.", 0.1, 0, 1)
gen.add("walk", int_t, 0, "Potential Field Walk",  1, 1, 10)
gen.add("potential_free_cost", double_t, 0, "Potential Field delta error", 200, 0, 255)

exit(gen.generate(PACKAGE, "potentialfield_local_planner", "PotentialFieldLocalPlanner"))